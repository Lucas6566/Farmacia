
unit Farmacia.Model.Dao.Clientes;

interface

uses
  Data.DB,
  Datasnap.DBClient,
  FireDAC.Stan.Param,
  FireDAC.Comp.Client,
  FireDAC.DApt,

  FireDAC.Stan.Intf,
  FireDAC.Stan.Option,
  FireDAC.Stan.Error,
  FireDAC.UI.Intf,
  FireDAC.Phys.Intf,
  FireDAC.Stan.Def,
  FireDAC.Stan.Pool,
  FireDAC.Stan.Async,
  FireDAC.Phys,
  FireDAC.Phys.FB,
  FireDAC.Phys.FBDef,
  FireDAC.VCLUI.Wait,

  Midaslib,
  Farmacia.Model.Dao.Clientes.Interfaces,
  Farmacia.Model.Dao.Pai.Interfaces,
  Farmacia.Model.Dao.Pai,
  Farmacia.Model.Entity.Clientes.Interfaces,
  Farmacia.Model.Entity.Clientes,
  Farmacia.Util.FunctionSQL;

type
  TCrudClientes = class(TDaoPai, iCrudClientes)
  private
    FClientes : iModelClientes;
    Query : TFDQuery;
    procedure CreateFields;
    procedure SetParamQuery;
  public
    function AlimentaDados : iModelClientes;
    function Cadastro : iModelClientes;

    function OpenQuery : iCrudClientes;
    function DataSet : TDataSet;
    function Select : iCrudClientes;
    function Insert : iCrudClientes;
    function Update : iCrudClientes;
    function Delete : iCrudClientes;

    constructor Create;
    destructor Destroy; override;
    class function New : iCrudClientes;
  end;

implementation

{ TCrudClientes }

function TCrudClientes.AlimentaDados: iModelClientes;
begin
  Result := FClientes.Codigo(ClientDataSet.FieldByName('COD_CLIENTE').AsInteger)
                     .Nome(ClientDataSet.FieldByName('NOM_CLIENTE').AsString)
                     .IndDocumento(ClientDataSet.FieldByName('IND_DOCUMENTO').AsInteger)
                     .Documento(ClientDataSet.FieldByName('DOC_CLIENTE').AsString)
                     .Cep(ClientDataSet.FieldByName('NUM_CEP').AsString)
                     .Logradouro(ClientDataSet.FieldByName('END_LOGRADOURO').AsString)
                     .NumEndereco(ClientDataSet.FieldByName('NUM_ENDERECO').AsInteger)
                     .Bairro(ClientDataSet.FieldByName('NOM_BAIRRO').AsString)
                     .Cidade(ClientDataSet.FieldByName('NOM_CIDADE').AsString)
                     .Uf(ClientDataSet.FieldByName('SIG_UF').AsString)
                     .Complemento(ClientDataSet.FieldByName('END_COMPLEMENTO').AsString)
                     .EndEletronico(ClientDataSet.FieldByName('END_ELETRONICO').AsString)
                     .TelFixo(ClientDataSet.FieldByName('TEL_FIXO').AsString)
                     .Fax(ClientDataSet.FieldByName('TEL_FAX').AsString)
                     .Celular(ClientDataSet.FieldByName('TEL_CELULAR').AsString)
                     .CodigoUsuario(ClientDataSet.FieldByName('COD_USUAIRO_ALT').AsInteger)
                     .DataCadastro(ClientDataSet.FieldByName('DAT_CADASTRO').AsDateTime)
                     .DataAlteracao(ClientDataSet.FieldByName('DAT_ALTERACAO').AsDateTime);
end;

function TCrudClientes.Cadastro: iModelClientes;
begin
  Result := FClientes;
end;

constructor TCrudClientes.Create;
begin
  inherited;
  GetInstancia;
  FClientes := TModelClientes.New;
  CreateFields;
end;

procedure TCrudClientes.CreateFields;
begin
  ClientDataSet.FieldDefs.Add('COD_CLIENTE', ftInteger);
  ClientDataSet.FieldDefs.Add('NOM_CLIENTE', ftString, 80);
  ClientDataSet.FieldDefs.Add('IND_DOCUMENTO', ftInteger);
  ClientDataSet.FieldDefs.Add('DOC_CLIENTE', ftString, 80);
  ClientDataSet.FieldDefs.Add('NUM_CEP', ftString, 80);
  ClientDataSet.FieldDefs.Add('END_LOGRADOURO', ftString, 80);
  ClientDataSet.FieldDefs.Add('NUM_ENDERECO', ftString, 80);
  ClientDataSet.FieldDefs.Add('NOM_BAIRRO', ftString, 80);
  ClientDataSet.FieldDefs.Add('NOM_CIDADE', ftString, 80);
  ClientDataSet.FieldDefs.Add('SIG_UF', ftString, 80);
  ClientDataSet.FieldDefs.Add('END_COMPLEMENTO', ftString, 80);
  ClientDataSet.FieldDefs.Add('END_ELETRONICO', ftString, 80);
  ClientDataSet.FieldDefs.Add('TEL_FIXO', ftString, 80);
  ClientDataSet.FieldDefs.Add('TEL_FAX', ftString, 80);
  ClientDataSet.FieldDefs.Add('TEL_CELULAR', ftString, 80);
  ClientDataSet.FieldDefs.Add('COD_USUAIRO_ALT', ftInteger);
  ClientDataSet.FieldDefs.Add('DAT_CADASTRO', ftDate);
  ClientDataSet.FieldDefs.Add('DAT_ALTERACAO', ftDate);

  ClientDataSet.CreateDataSet;

  ClientDataSet.IndexFieldNames := 'COD_CLIENTE';
end;

function TCrudClientes.DataSet: TDataSet;
begin
  Result := ClientDataSet;
end;

function TCrudClientes.Delete: iCrudClientes;
begin
  Result := Self;

  Query.SQL.Clear;

  Query.SQL.Add('DELETE FROM CLIENTES');
  Query.SQL.Add('  WHERE COD_CLIENTE = :pCOD_CLIENTE');

  Query.ParamByName('pCOD_CLIENTE').AsInteger := Cadastro.GetCodigo;

  Query.ExecSQL;
end;

destructor TCrudClientes.Destroy;
begin

  inherited;
end;

function TCrudClientes.Insert: iCrudClientes;
begin

end;

class function TCrudClientes.New: iCrudClientes;
begin

end;

function TCrudClientes.OpenQuery: iCrudClientes;
begin

end;

function TCrudClientes.Select: iCrudClientes;
begin

end;

procedure TCrudClientes.SetParamQuery;
begin

end;

function TCrudClientes.Update: iCrudClientes;
begin

end;

end.
