unit Farmacia.Model.Connection;

interface

uses
  FireDAC.Stan.Intf,
  FireDAC.Stan.Option,
  FireDAC.Stan.Error,
  FireDAC.UI.Intf,
  FireDAC.Phys.Intf,
  FireDAC.Stan.Def,
  FireDAC.Stan.Pool,
  FireDAC.Stan.Async,
  FireDAC.Phys,
  FireDAC.Phys.ODBC,
  FireDAC.Phys.ODBCDef,
  FireDAC.VCLUI.Error,
  FireDAC.VCLUI.Wait,
  FireDAC.Stan.Param,
  FireDAC.DatS,
  FireDAC.DApt.Intf,
  FireDAC.DApt, Data.DB,
  FireDAC.Comp.DataSet,
  FireDAC.Comp.Client,
  FireDAC.Phys.ODBCBase,
  FireDAC.Comp.UI,
  Farmacia.Model.Connection.Interfaces;

type
  TConnection = class(TInterfacedObject, iModelConnection)
    private
      FDriveID : String;
      FDataBase : String;
      FUserName : String;
      FPassword : String;
      FODBCDriver : String;
      FConnection : TFDConnection;
      FWaitCursor : TFDGUIxWaitCursor;
      FErrorDialog : TFDGUIxErrorDialog;
      FDriverLink : TFDPhysODBCDriverLink;
    public
      function Connection : TFDConnection;
      function Connect : iModelConnection;

      function DriveID(aValue: String): iModelConnection;
      function DataBase(aValue: String): iModelConnection;
      function UserName(aValue: String): iModelConnection;
      function Password(aValue: String): iModelConnection;
      function ODBCDriver(aValue: String): iModelConnection;//MySQL ODBC 8.0 ANSI Driver

      constructor Create;
      destructor Destroy; override;
      class function New : iModelConnection;
  end;

implementation

{ TConnection }

function TConnection.Connect: iModelConnection;
begin
  Result := Self;
  FConnection.DriverName := FDriveID;
  FConnection.Params.Add('Database='+FDataBase);
  FConnection.Params.Add('UserName='+FUserName);
  FConnection.Params.Add('Password='+FUserName);
  FConnection.Params.Add('DataSource='+FUserName);
  FConnection.Params.Add('ODBCDriver='+FODBCDriver);
  FConnection.Params.Add('ODBCVersion=3.0');

  FConnection.Connected := True;
end;

function TConnection.Connection: TFDConnection;
begin
  Result := FConnection;
end;

constructor TConnection.Create;
begin
  FConnection  := TFDConnection.Create(nil);
  FWaitCursor  := TFDGUIxWaitCursor.Create(nil);
  FErrorDialog := TFDGUIxErrorDialog.Create(nil);
  FDriverLink  := TFDPhysODBCDriverLink.Create(nil);
end;

function TConnection.DataBase(aValue: String): iModelConnection;
begin
  Result := Self;
  FDataBase := aValue;
end;

destructor TConnection.Destroy;
begin
  FConnection.DisposeOf;
  FWaitCursor.DisposeOf;
  FErrorDialog.DisposeOf;
  FDriverLink.DisposeOf;
  inherited;
end;

function TConnection.DriveID(aValue: String): iModelConnection;
begin
  Result := Self;
  FDriveID := aValue;
end;

class function TConnection.New: iModelConnection;
begin
  Result := Self.Create;
end;

function TConnection.ODBCDriver(aValue: String): iModelConnection;
begin
  Result := Self;
  FODBCDriver := aValue;
end;

function TConnection.Password(aValue: String): iModelConnection;
begin
  Result := Self;
  FPassword := aValue;
end;

function TConnection.UserName(aValue: String): iModelConnection;
begin
  Result := Self;
  FUserName := aValue;
end;

end.
